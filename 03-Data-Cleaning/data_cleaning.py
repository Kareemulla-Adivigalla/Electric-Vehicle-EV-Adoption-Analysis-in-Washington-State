# -*- coding: utf-8 -*-
"""Data_Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QXo__2f7wvmbu_DbzxNCe3iB2no-f5w7
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

#to display plots inline
# %matplotlib inline

from google.colab import drive

# Mount Google Drive
drive.mount('/content/gdrive')

# Access your dataset
data_path = '/content/gdrive/My Drive/Colab Notebooks/Electiric vehical/raw_data.csv'

df = pd.read_csv(data_path)
# Display the first few rows of the DataFrame
df.head()

# summary of the dataset
df.info()

# Check for missing values
df.isnull().sum()

df_cleaned = df.dropna(subset=['County', 'City', 'Postal Code', 'Electric Utility', '2020 Census Tract'])

# Handling missing values in Legislative District
# Impute using the most common Legislative District for the same County
df_cleaned['Legislative District'] = df_cleaned.groupby('County')['Legislative District'].transform(
    lambda x: x.fillna(x.mode()[0]) if not x.mode().empty else x)

# Dropping these rows as the number of missing values is small
df_cleaned = df_cleaned.dropna(subset=['Vehicle Location'])

# Final check for any remaining missing values
df_cleaned.isnull().sum()

# Final check for any remaining missing values
df_cleaned.isnull().sum()

# Correcting Data Types
# Convert columns to appropriate data types
df_cleaned['Postal Code'] = df_cleaned['Postal Code'].astype(str)
df_cleaned['Model Year'] = df_cleaned['Model Year'].astype(int)

# Check the updated data types
df_cleaned.info()

# Handling Outliers
import matplotlib.pyplot as plt
import seaborn as sns

# Visualize potential outliers using boxplots
plt.figure(figsize=(12, 6))

# Boxplot for Electric Range
plt.subplot(1, 2, 1)
sns.boxplot(df_cleaned['Electric Range'])
plt.title('Boxplot for Electric Range')

# Boxplot for Base MSRP
plt.subplot(1, 2, 2)
sns.boxplot(df_cleaned['Base MSRP'])
plt.title('Boxplot for Base MSRP')

plt.show()

# Handling outliers: Capping outliers to the 1st and 99th percentiles
Q1 = df_cleaned['Electric Range'].quantile(0.01)
Q3 = df_cleaned['Electric Range'].quantile(0.99)
df_cleaned['Electric Range'] = df_cleaned['Electric Range'].clip(Q1, Q3)

Q1 = df_cleaned['Base MSRP'].quantile(0.01)
Q3 = df_cleaned['Base MSRP'].quantile(0.99)
df_cleaned['Base MSRP'] = df_cleaned['Base MSRP'].clip(Q1, Q3)

# Remove Duplicates
# Remove duplicate rows if any
df_cleaned = df_cleaned.drop_duplicates()

# Confirm no duplicates exist
print(f"Number of duplicates: {df_cleaned.duplicated().sum()}")

# Final Data Quality Check
df_cleaned.info()
df_cleaned.describe()

# Display the first few rows of the cleaned DataFrame
df_cleaned.head()

# Specify the file path where you want to save the cleaned dataset
cleaned_data_path = '/content/gdrive/My Drive/Colab Notebooks/Electiric vehical/cleaned_data.csv'

# Save the cleaned DataFrame to a CSV file
df_cleaned.to_csv(cleaned_data_path, index=False)

print(f"Cleaned dataset saved successfully to {cleaned_data_path}")